#!/usr/bin/python
#
# Copyright (C) 2019 Junyi Yi (@JunyiYi)
#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}


DOCUMENTATION = '''
---
module: azure_rm_batchapplication
version_added: "2.9"
short_description: Manage Azure Application instance.
description:
    - Create, update and delete instance of Azure Batch Application.

options:
    resource_group:
        description:
        - The name of the resource group that contains the Batch account.
        required: true
    name:
        description:
        - The name of the application. This must be unique within the account.
        required: true
    account_name:
        description:
        - The name of the Batch account.
        required: true
    allow_updates:
        description:
        - A value indicating whether packages within the application may be overwritten using the same version string.
        type: bool
    default_version:
        description:
        - "The package to use if a client requests the application but does not specify a version. This property can only be set to the name of an
          existing package."
    display_name:
        description:
        - The display name for the application.
    state:
        description:
        - Assert the state of the Batch Application.
        - Use 'present' to create or update a Batch Application and 'absent' to delete it.
        default: present
        choices:
        - present
        - absent

extends_documentation_fragment:
    - azure
    
author:
    - "Junyi Yi (@JunyiYi)"
'''

EXAMPLES = '''
  - name: Create Batch Application
    azure_rm_batchapplication:
        resource_group: MyResGroup
        name: mybatchapplication
        account_name: mybatchaccount
'''

RETURN = '''
--- {}
'''

import time
from ansible.module_utils.azure_rm_common_ext import AzureRMModuleBaseExt
from ansible.module_utils.common.dict_transformations import _snake_to_camel

try:
    from msrestazure.azure_exceptions import CloudError
    from msrest.polling import LROPoller
    from msrestazure.azure_operation import AzureOperationPoller
    from msrest.serialization import Model
    from azure.mgmt.batch import BatchManagementClient
except ImportError:
    # This is handled in azure_rm_common
    pass


class Actions:
    NoAction, Create, Update, Delete = range(4)


class AzureRMBatchApplication(AzureRMModuleBaseExt):
    """Configuration class for an Azure RM Batch Application resource"""

    def __init__(self):
        self.module_arg_spec = dict(
            resource_group=dict(
                required=True,
                type='str'
            ),
            name=dict(
                required=True,
                type='str'
            ),
            account_name=dict(
                required=True,
                type='str',
                updatable=False,
                disposition='/'
            ),
            allow_updates=dict(
                type='bool'
            ),
            default_version=dict(
                type='str'
            ),
            display_name=dict(
                type='str'
            ),
            state=dict(
                type='str',
                default='present',
                choices=['present', 'absent']
            )
        )

        self.resource_group = None
        self.account_name = None
        self.name = None
        self.parameters = dict()

        self.results = dict(changed=False)
        self.mgmt_client = None
        self.state = None
        self.to_do = Actions.NoAction

        super(AzureRMBatchApplication, self).__init__(derived_arg_spec=self.module_arg_spec,
                                                      supports_check_mode=True,
                                                      supports_tags=False)

    def exec_module(self, **kwargs):
        """Main module execution method"""

        for key in list(self.module_arg_spec.keys()):
            if hasattr(self, key):
                setattr(self, key, kwargs[key])
            elif kwargs[key] is not None:
                self.parameters[key] = kwargs[key]


        response = None

        self.mgmt_client = self.get_mgmt_svc_client(BatchManagementClient,
                                                    base_url=self._cloud_environment.endpoints.resource_manager)

        old_response = self.get_batchapplication()

        if not old_response:
            self.log("Batch Application instance doesn't exist")
            if self.state == 'absent':
                self.log("Old instance didn't exist")
            else:
                self.to_do = Actions.Create
        else:
            self.log("Batch Application instance already exists")
            if self.state == 'absent':
                self.to_do = Actions.Delete
            elif self.state == 'present':
                self.results['old'] = old_response
                self.results['new'] = self.parameters
                if not self.idempotency_check(old_response, self.parameters):
                    self.to_do = Actions.Update

        if (self.to_do == Actions.Create) or (self.to_do == Actions.Update):
            self.log("Need to Create / Update the Batch Application instance")

            self.results['changed'] = True
            if self.check_mode:
                return self.results

            response = self.create_update_batchapplication()

            self.log("Creation / Update done")
        elif self.to_do == Actions.Delete:
            self.log("Batch Application instance deleted")
            self.results['changed'] = True

            if self.check_mode:
                return self.results

            self.delete_batchapplication()
        else:
            self.log("Batch Application instance unchanged")
            self.results['changed'] = False
            response = old_response

        if self.state == 'present':
            self.results.update({
            })
        return self.results

    def create_update_batchapplication(self):
        '''
        Creates or updates Batch Application with the specified configuration.

        :return: deserialized Batch Application instance state dictionary
        '''
        self.log("Creating / Updating the Batch Application instance {0}".format(self.name))

        try:
            if self.to_do == Actions.Create:
                response = self.mgmt_client.application.create(resource_group_name=self.resource_group,
                                                               account_name=self.account_name,
                                                               application_name=self.name,
                                                               parameters=self.parameters)
            else:
                response = self.mgmt_client.application.update(resource_group_name=self.resource_group,
                                                               account_name=self.account_name,
                                                               application_name=self.name,
                                                               parameters=self.parameters)
            if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
                response = self.get_poller_result(response)
        except CloudError as exc:
            self.log('Error attempting to create the Batch Application instance.')
            self.fail("Error creating the Batch Application instance: {0}".format(str(exc)))
        return response.as_dict()

    def delete_batchapplication(self):
        '''
        Deletes specified Batch Application instance in the specified subscription and resource group.

        :return: True
        '''
        self.log("Deleting the Batch Application instance {0}".format(self.name))
        try:
            response = self.mgmt_client.application.delete(resource_group_name=self.resource_group,
                                                           account_name=self.account_name,
                                                           application_name=self.name)
        except CloudError as e:
            self.log('Error attempting to delete the Batch Application instance.')
            self.fail("Error deleting the Batch Application instance: {0}".format(str(e)))

        if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
            response = self.get_poller_result(response)
        return True

    def get_batchapplication(self):
        '''
        Gets the properties of the specified Batch Application
        :return: deserialized Batch Application instance state dictionary
        '''
        self.log("Checking if the Batch Application instance {0} is present".format(self.name))
        found = False
        try:
            response = self.mgmt_client.application.get(resource_group_name=self.resource_group,
                                                        account_name=self.account_name,
                                                        application_name=self.name)
            found = True
            self.log("Response : {0}".format(response))
            self.log("Batch Application instance : {0} found".format(response.name))
        except CloudError as e:
            self.log('Did not find the Batch Application instance.')
        if found is True:
            return response.as_dict()
        return False


def main():
    """Main execution"""
    AzureRMBatchApplication()


if __name__ == '__main__':
    main()
