// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmBatchApplication() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmBatchApplicationCreate,
        Read: resourceArmBatchApplicationRead,
        Update: resourceArmBatchApplicationUpdate,
        Delete: resourceArmBatchApplicationDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
            },

            "resource_group_name": resourceGroupNameSchema(),

            "account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
            },

            "allow_updates": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "default_version": {
                Type: schema.TypeString,
                Optional: true,
            },

            "display_name": {
                Type: schema.TypeString,
                Optional: true,
            },
        },
    }
}

func resourceArmBatchApplicationCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group_name").(string)
    accountName := d.Get("account_name").(string)

    if requireResourcesToBeImported {
        resp, err := client.Get(ctx, resourceGroup, accountName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(resp.Response) {
                return fmt.Errorf("Error checking for present of existing Batch Application %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
            }
        }
        if !utils.ResponseWasNotFound(resp.Response) {
            return tf.ImportAsExistsError("azurerm_batch_application", *resp.ID)
        }
    }

    allowUpdates := d.Get("allow_updates").(bool)
    defaultVersion := d.Get("default_version").(string)
    displayName := d.Get("display_name").(string)

    parameters := batch.Application{
        Properties: &batch.ApplicationProperties{
            AllowUpdates: utils.Bool(allowUpdates),
            DefaultVersion: utils.String(defaultVersion),
            DisplayName: utils.String(displayName),
        },
    }


    if _, err := client.Create(ctx, resourceGroup, accountName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Batch Application %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, accountName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Batch Application %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Batch Application %q (Account Name %q / Resource Group %q) ID", name, accountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmBatchApplicationRead(d, meta)
}

func resourceArmBatchApplicationRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationClient
    ctx := meta.(*ArmClient).StopContext

    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["batchAccounts"]
    name := id.Path["applications"]

    resp, err := client.Get(ctx, resourceGroup, accountName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Batch Application %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Batch Application %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("resource_group_name", resourceGroup)
    d.Set("account_name", accountName)
    if properties := resp.Properties; properties != nil {
        d.Set("allow_updates", properties.AllowUpdates)
        d.Set("default_version", properties.DefaultVersion)
        d.Set("display_name", properties.DisplayName)
    }

    return nil
}

func resourceArmBatchApplicationUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group_name").(string)
    accountName := d.Get("account_name").(string)
    allowUpdates := d.Get("allow_updates").(bool)
    defaultVersion := d.Get("default_version").(string)
    displayName := d.Get("display_name").(string)

    parameters := batch.Application{
        Properties: &batch.ApplicationProperties{
            AllowUpdates: utils.Bool(allowUpdates),
            DefaultVersion: utils.String(defaultVersion),
            DisplayName: utils.String(displayName),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, accountName, name, parameters); err != nil {
        return fmt.Errorf("Error updating Batch Application %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }

    return resourceArmBatchApplicationRead(d, meta)
}

func resourceArmBatchApplicationDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationClient
    ctx := meta.(*ArmClient).StopContext


    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["batchAccounts"]
    name := id.Path["applications"]

    if _, err := client.Delete(ctx, resourceGroup, accountName, name); err != nil {
        return fmt.Errorf("Error deleting Batch Application %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }

    return nil
}
