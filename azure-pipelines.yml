# Ruby
# Package your Ruby project.
# Add steps that install rails, analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/ruby

trigger:
- master

variables:
  GENROOT: $(system.defaultWorkingDirectory)/generated
  GOPATH: '$(GENROOT)/go' # Go workspace path
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOSRC:  '$(GOPATH)/src' # Go source path
  TFORG: '$(GOPATH)/src/github.com/terraform-providers'
  TFREPO: 'terraform-provider-azurerm'
  TFROOT: '$(TFORG)/$(TFREPO)'
  TFGITURL: 'https://github.com/VSChina/terraform-provider-azurerm.git'
  ASREPO: 'ansible'
  ASROOT: '$(GENROOT)/$(ASREPO)'
  ASGITURL: 'https://github.com/VSChina/ansible.git'
  MMROOT: $(system.defaultWorkingDirectory)/tools/magic-modules

steps:
- bash: |
    shopt -s extglob
    echo `go env`
    echo '##vso[task.prependpath]$(GOBIN)'
    if [ ! -d "$(TFORG)" ]
    then
      mkdir -p "$(TFORG)"
    fi
  displayName: 'init Go environment'
  failOnStderr: true

- bash: |
    go get github.com/github/hub
    hub version
    go get golang.org/x/tools/cmd/goimports
    pip install black
  displayName: 'install tools'
  failOnStderr: false

- bash: |
    git clone $(TFGITURL) $(TFROOT)
    cd $(TFROOT)
    git checkout autogen-pr-$(system.pullRequest.pullRequestNumber) || git checkout -b autogen-pr-$(system.pullRequest.pullRequestNumber)
    if [[ $(git branch -a --list 'origin/autogen-pr-$(system.pullRequest.pullRequestNumber)') ]]; then
      git pull
    fi
  displayName: 'clone terraform repository'
  failOnStderr: false

- bash: |
    git clone $(ASBGITURL) $(ASROOT)
    cd $(ASROOT)
    git checkout autogen-pr-$(system.pullRequest.pullRequestNumber) || git checkout -b autogen-pr-$(system.pullRequest.pullRequestNumber)
    if [[ $(git branch -a --list 'origin/autogen-pr-$(system.pullRequest.pullRequestNumber)') ]]; then
      git pull
    fi
  displayName: 'clone ansible repository'
  failOnStderr: false

- bash: |
    git submodule update --init && \
    cd $(MMROOT) && \
    gem install bundler && \
    bundle install --retry=3 --jobs=4
  displayName: 'init magic modules'
  failOnStderr: false

- bash: |
    git config --global user.email "audevbot@microsoft.com"
    git config --global user.name "audevbot"
    git config --global credential.helper store
    git config --global push.default current
    git config --global pull.default current
    echo "https://$(GITHUB_USER):$(GITHUB_TOKEN)@github.com" > ~/.git-credentials
  displayName: 'git config'
  failOnStderr: true

- bash: |
    make build && \
    make format-terraform
  displayName: 'code generation'
  failOnStderr: false

- bash: |
    cd $(TFROOT))
    git add -A
    git commit -m "Code generation for Terraform."
    git push
    REPO_URL=$(System.PullRequest.SourceRepositoryURI)
    PR_URL=${REPO_URL:0:${#REPO_URL}-4}/pull/$(system.pullRequest.pullRequestNumber)
    hub pull-request -F- <<<"Code generation from
    magic-module-specs#$(system.pullRequest.pullRequestNumber) for Terraform

    Upstream PR: $PR_URL
    " || echo "PR exists."
  env:
    GITHUB_USER: $(GITHUB_USER)
    GITHUB_TOKEN: $(GITHUB_TOKEN)
    GOPATH: $(GOPATH)
  displayName: 'prepare pr for terraform'
  failOnStderr: false


- bash: |
    cd $(ASBROOT)
    # run `black` against the directory of ansible if neccessary.
    git add -A
    git commit -m "Code generation for Ansible."
    git push
    REPO_URL=$(System.PullRequest.SourceRepositoryURI)
    PR_URL=${REPO_URL:0:${#REPO_URL}-4}/pull/$(system.pullRequest.pullRequestNumber)
    hub pull-request -F- <<<"Code generation from
    magic-module-specs#$(system.pullRequest.pullRequestNumber) for Ansible

    Upstream PR: $PR_URL
    " || echo "PR exists."
  env:
    GITHUB_USER: $(GITHUB_USER)
    GITHUB_TOKEN: $(GITHUB_TOKEN)
  displayName: 'prepare pr for ansible'
  failOnStderr: false
