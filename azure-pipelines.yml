# Ruby
# Package your Ruby project.
# Add steps that install rails, analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/ruby

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  # GOROOT: '/usr/local/go1.12' # Go installation path
  GOPATH: $(system.defaultWorkingDirectory)/go-work # Go workspace path
  GOBIN:  $(GOPATH)/bin # Go binaries path
  # TODO: modules should be the default in Go 1.13, so this won't be needed

steps:
- task: UseRubyVersion@0
  inputs:
    versionSpec: '>= 2.5'

- task: UsePythonVersion@0
  inputs:
    versionSpec: '>=3.6'

- bash: |
    shopt -s extglob
    echo `go env`
    echo '##vso[task.prependpath]$(GOBIN)'
  displayName: 'init Go environment'
  failOnStderr: true

- bash: |
    go get github.com/github/hub
    hub version
    go get golang.org/x/tools/cmd/goimports
    pip install black
  displayName: 'install tools'
  failOnStderr: false

- bash: |
    git submodule update --init
  displayName: 'init submodules'
  failOnStderr: false

- bash: |
    git config --global user.email "audevbot@microsoft.com"
    git config --global user.name "audevbot"
    git config --global credential.helper store
    git config --global push.default current
    git config --global pull.default current
    echo "https://$(GITHUB_USER):$(GITHUB_TOKEN)@github.com" > ~/.git-credentials
  displayName: 'git config'
  failOnStderr: true

- bash: |
    cd tools/magic-modules
    gem install bundler
    bundle install --retry=3 --jobs=4
    jq '.[]' ../../resources.json | xargs -I '{}' bundle exec compiler -p ../../'{}' -e terraform -o ../../generated/terraform-provider-azurerm/
    jq '.[]' ../../resources.json | xargs -I '{}' bundle exec compiler -p ../../'{}' -e ansible -o ../../generated/ansible/
  displayName: 'code generation'
  failOnStderr: false

- bash: |
    cd generated/terraform-provider-azurerm
    git checkout autogen-pr-$(system.pullRequest.pullRequestNumber) || git checkout -b autogen-pr-$(system.pullRequest.pullRequestNumber)
    make goimports
    make fmt
    git add -A
    git commit -m "Code generation for Terraform."
    if [[ $(git branch -a --list 'origin/autogen-pr-$(system.pullRequest.pullRequestNumber)') ]]; then
      git pull
    fi
    git push
    REPO_URL=$(System.PullRequest.SourceRepositoryURI)
    PR_URL=${REPO_URL:0:${#REPO_URL}}/pull/$(system.pullRequest.pullRequestNumber)

    hub pull-request -F- <<<"Code generation from
    magic-module-specs#$(system.pullRequest.pullRequestNumber) for Terraform

    Upstream PR: $PR_URL
    "
  env:
    GITHUB_USER: $(GITHUB_USER)
    GITHUB_TOKEN: $(GITHUB_TOKEN)
    GO111MODULE: on
    GOFLAGS: -mod=vendor
  displayName: 'prepare pr for terraform'
  failOnStderr: false


- bash: |
    cd generated/ansible
    # run `black` against the directory of ansible
    git checkout autogen-pr-$(system.pullRequest.pullRequestNumber) || git checkout -b autogen-pr-$(system.pullRequest.pullRequestNumber)
    git add -A
    git commit -m "Code generation for Ansible."
    if [[ $(git branch -a --list 'origin/autogen-pr-$(system.pullRequest.pullRequestNumber)') ]]; then
      git pull
    fi
    git push
    REPO_URL=$(System.PullRequest.SourceRepositoryURI)
    PR_URL=${REPO_URL:0:${#REPO_URL}}/pull/$(system.pullRequest.pullRequestNumber)
    hub pull-request -F- <<<"Code generation from
    magic-module-specs#$(system.pullRequest.pullRequestNumber) for Ansible

    Upstream PR: $PR_URL
    "
  env:
    GITHUB_USER: $(GITHUB_USER)
    GITHUB_TOKEN: $(GITHUB_TOKEN)
  displayName: 'prepare pr for ansible'
  failOnStderr: false
